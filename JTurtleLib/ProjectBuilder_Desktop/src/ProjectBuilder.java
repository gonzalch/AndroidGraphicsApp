// ProjectBuilder.java

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Properties;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

public class ProjectBuilder extends javax.swing.JFrame
{
  // ------------- Inner class MyFilter -------------------
  private class MyFilter extends javax.swing.filechooser.FileFilter
  {
    public boolean accept(File file)
    {
      String filename = file.getName();
      return (filename.endsWith(".jar") || file.isDirectory());
    }

    public String getDescription()
    {
      return "Library JARs (*.jar)";
    }
  }
  private static String VERSION = "4.00";
  private final int NB_TEXTFIELDS = 6;
  private Thread t;
  private String projectRoot;
  private String packageName;
  private String appName;
  private String libraryFiles;
  private String spritesFolder;
  private String mediaFolder;
  private final String packageNameTag = "$[PackageName]";
  private final String appNameTag = "$[AppName]";
  private final String FS = System.getProperty("file.separator");
  private String propPath = System.getProperty("user.home") + FS
    + ".ProjectBuilder.properties";
  private final String[] keys =
  {
    "project.root",
    "package.name",
    "application.name",
    "library.file",
    "sprites.folder",
    "media.folder"
  };
  private File propFile = null;
  private Properties prop = new Properties();
  private String[] mediaFiles =
  {
    "click_.mp3", "boing_.mp3", "ping_.mp3"
  };
  private String[] spriteFiles =
  {
    "turtle_default.png"
  };

  /** Creates new form ProjectBuilder */
  public ProjectBuilder()
  {
    initComponents();
    setTitle("Project Builder V " + VERSION + " (www.aplu.ch)");
    String[] fields = new String[NB_TEXTFIELDS];

    Properties prop = loadProperties();
    if (prop != null)
    {
      String version = prop.getProperty("prog.version");
      if (version == null)
        version = "";
      if (!VERSION.equals(version))
        new File(propPath).delete();
      else
      {
        for (int i = 0; i < NB_TEXTFIELDS; i++)
        {
          String property = prop.getProperty(keys[i]);
          if (property != null)
          {
            property.trim();
            fields[i] = property;
          }
          else
            fields[i] = "";
        }
        String useTurtle = prop.getProperty("use.turtle");
        if (useTurtle != null && useTurtle.toLowerCase().equals("yes"))
          chkTurtle.setSelected(true);
        String useInternet = prop.getProperty("use.internet");
        if (useInternet != null && useInternet.toLowerCase().equals("yes"))
          chkInternet.setSelected(true);
        String useBluetooth = prop.getProperty("use.bluetooth");
        if (useBluetooth != null && useBluetooth.toLowerCase().equals("yes"))
          chkBluetooth.setSelected(true);
      }
    }

    setFields(fields);
    tfStatus.setText("Select project properties.");
  }

  private void setFields(String[] fields)
  {
    tfProjectRoot.setText(fields[0]);
    tfPackageName.setText(fields[1]);
    tfAppName.setText(fields[2]);
    tfLibFiles.setText(fields[3]);
    tfSpriteFolder.setText(fields[4]);
    tfMediaFolder.setText(fields[5]);
  }

  private String[] getFields()
  {
    String[] s = new String[NB_TEXTFIELDS];
    s[0] = tfProjectRoot.getText().trim();
    s[1] = tfPackageName.getText().trim();
    s[2] = tfAppName.getText().trim();
    s[3] = tfLibFiles.getText().trim();
    s[4] = tfSpriteFolder.getText().trim();
    s[5] = tfMediaFolder.getText().trim();
    return s;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    tfProjectRoot = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    tfPackageName = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    tfAppName = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    btnLibFiles = new javax.swing.JButton();
    tfLibFiles = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    tfSpriteFolder = new javax.swing.JTextField();
    btnSpriteFolder = new javax.swing.JButton();
    tfMediaFolder = new javax.swing.JTextField();
    btnMediaFolder = new javax.swing.JButton();
    jLabel6 = new javax.swing.JLabel();
    jPanel2 = new javax.swing.JPanel();
    chkTurtle = new javax.swing.JCheckBox();
    chkInternet = new javax.swing.JCheckBox();
    chkBluetooth = new javax.swing.JCheckBox();
    btnBuild = new javax.swing.JButton();
    jSeparator1 = new javax.swing.JSeparator();
    jSeparator2 = new javax.swing.JSeparator();
    tfStatus = new javax.swing.JTextField();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel1.setText("Project Root:");

    tfProjectRoot.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

    jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel2.setText("Package Name:");

    tfPackageName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

    jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel3.setText("App Name:");

    tfAppName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

    jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel4.setText("Library File(s):");

    btnLibFiles.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    btnLibFiles.setText("Select");
    btnLibFiles.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnLibFilesActionPerformed(evt);
      }
    });

    tfLibFiles.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

    jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel5.setText("Sprite Folder:");

    tfSpriteFolder.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

    btnSpriteFolder.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    btnSpriteFolder.setText("Select");
    btnSpriteFolder.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnSpriteFolderActionPerformed(evt);
      }
    });

    tfMediaFolder.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

    btnMediaFolder.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    btnMediaFolder.setText("Select");
    btnMediaFolder.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnMediaFolderActionPerformed(evt);
      }
    });

    jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel6.setText("Media Folder:");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(10, 10, 10)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(tfMediaFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnMediaFolder))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(tfSpriteFolder)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnSpriteFolder))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(tfLibFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
              .addComponent(tfAppName, javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(tfPackageName, javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(tfProjectRoot, javax.swing.GroupLayout.Alignment.LEADING))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnLibFiles)))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(tfProjectRoot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(tfPackageName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(tfAppName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(tfLibFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnLibFiles))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(tfSpriteFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnSpriteFolder))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(tfMediaFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnMediaFolder)))
    );

    chkTurtle.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    chkTurtle.setText("Use Turtle");

    chkInternet.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    chkInternet.setText("Use Internet");

    chkBluetooth.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    chkBluetooth.setText("Use Bluetooth");

    btnBuild.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    btnBuild.setText("Build");
    btnBuild.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnBuildActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(chkTurtle)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(chkInternet)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(chkBluetooth)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(btnBuild, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(btnBuild, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(chkTurtle)
          .addComponent(chkInternet)
          .addComponent(chkBluetooth)))
    );

    tfStatus.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSeparator1)
          .addComponent(jSeparator2)
          .addComponent(tfStatus))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(7, 7, 7)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(tfStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void btnLibFilesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLibFilesActionPerformed
  {//GEN-HEADEREND:event_btnLibFilesActionPerformed
    String libFile = selectFile("Choose library file");
    if (libFile != null)
    {
      String s = tfLibFiles.getText().trim();
      if (s.length() == 0)
        tfLibFiles.setText(libFile);
      else
        tfLibFiles.setText(s + ";" + libFile);
    }
  }//GEN-LAST:event_btnLibFilesActionPerformed

  private void btnSpriteFolderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSpriteFolderActionPerformed
  {//GEN-HEADEREND:event_btnSpriteFolderActionPerformed
    String spriteFolder = selectFolder("Choose sprite folder");
    if (spriteFolder != null)
      tfSpriteFolder.setText(spriteFolder.trim());
  }//GEN-LAST:event_btnSpriteFolderActionPerformed

  private void btnMediaFolderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMediaFolderActionPerformed
  {//GEN-HEADEREND:event_btnMediaFolderActionPerformed
    String mediaFolder = selectFolder("Choose media folder");
    if (mediaFolder != null)
      tfMediaFolder.setText(mediaFolder.trim());
  }//GEN-LAST:event_btnMediaFolderActionPerformed

  private void btnBuildActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBuildActionPerformed
  {//GEN-HEADEREND:event_btnBuildActionPerformed
    if (checkFields())
      doIt();
  }//GEN-LAST:event_btnBuildActionPerformed

  private String selectFolder(String title)
  {
    JFileChooser chooser = new JFileChooser();
    chooser.setDialogTitle(title);
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    // Disable the "All files" option.
    chooser.setAcceptAllFileFilterUsed(false);
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
      return chooser.getSelectedFile().getAbsolutePath();
    return null;
  }

  private String selectFile(String title)
  {
    JFileChooser chooser = new JFileChooser();
    chooser.setDialogTitle(title);
    chooser.setAcceptAllFileFilterUsed(false);
    chooser.addChoosableFileFilter(new MyFilter());
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
      return chooser.getSelectedFile().getAbsolutePath();
    return null;
  }

  private boolean checkFields()
  {
    String[] fields = getFields();

    if (fields[0].equals(""))
    {
      tfStatus.setText("Empty project root not allowed");
      return false;
    }
    if (fields[1].equals(""))
    {
      tfStatus.setText("Empty package name not allowed");
      return false;
    }
    if (fields[1].indexOf('.') == -1)
    {
      tfStatus.setText("Package name must contain a least one period");
      return false;
    }
    if (fields[2].equals(""))
    {
      tfStatus.setText("Empty application name not allowed");
      return false;
    }
    return true;
  }

  private void copySpritesFolder()
  {
    File spritesFolderFile = new File(spritesFolder);
    String spritesDestination = projectRoot + "/res/drawable";
    File spritesDestinationFile = new File(spritesDestination);
    if (!spritesDestinationFile.exists())
    {
      if (!spritesDestinationFile.mkdir())
        return;
    }

    if (chkTurtle.isSelected())
      copyResource("jdroid_gglogo_turtle.png",
        spritesDestinationFile.getPath() + FS + "jdroid_gglogo.png");
    else
      copyResource("jdroid_gglogo_standard.png",
        spritesDestinationFile.getPath() + FS + "jdroid_gglogo.png");

    for (String sprite : spriteFiles)
      copyResource(sprite, spritesDestinationFile.getPath() + FS + sprite);

    if (spritesFolder.equals(""))
      return;  // no sprites folder given
    if (!spritesFolderFile.exists())
      return;
    String files[] = spritesFolderFile.list();
    for (int i = 0; i < files.length; i++)
    {
      String srcPath = spritesFolderFile.getPath() + FS + files[i];
      String dstPath = spritesDestinationFile.getPath() + FS + files[i];
      copyFile(srcPath, dstPath);
    }
  }

  private void copyMediaFolder()
  {
    File mediaFolderFile = new File(mediaFolder);
    String mediaDestination = projectRoot + "/res/raw";
    File mediaDestinationFile = new File(mediaDestination);
    if (!mediaDestinationFile.exists())
    {
      if (!mediaDestinationFile.mkdir())
        return;
    }

    for (String media : mediaFiles)
      copyResource(media, mediaDestinationFile.getPath() + FS + media);

    if (mediaFolder.equals(""))
      return;  // no media folder given
    if (!mediaFolderFile.exists())
      return;
    String files[] = mediaFolderFile.list();
    for (int i = 0; i < files.length; i++)
    {
      String srcPath = mediaFolderFile.getPath() + FS + files[i];
      String dstPath = mediaDestinationFile.getPath() + FS + files[i];
      copyFile(srcPath, dstPath);
    }
  }

  private boolean copyResource(String src, String dst)
  {
    InputStream is = getClass().getResourceAsStream("res/" + src);
    FileOutputStream fos = null;
    try
    {
      fos = new FileOutputStream(dst);
      byte[] buffer = new byte[1024];
      int bytesRead;
      while ((bytesRead = is.read(buffer)) != -1)
        fos.write(buffer, 0, bytesRead);
      fos.flush();
    }
    catch (IOException ex)
    {
      System.out.println("failed");
      return false;
    }
    finally
    {
      try
      {
        fos.close();
        is.close();
      }
      catch (Exception ex)
      {
      }
    }
    return true;
  }

  private boolean copyFile(String srcPath, String dstPath)
  {
    InputStream in = null;
    OutputStream out = null;
    try
    {
      in = new FileInputStream(srcPath);
      out = new FileOutputStream(dstPath);

      // Transfer bytes from in to out
      byte[] buf = new byte[1024];
      int len;
      while ((len = in.read(buf)) > 0)
      {
        out.write(buf, 0, len);
      }
    }
    catch (IOException ex)
    {
      return false;
    }
    finally
    {
      try
      {
        in.close();
        out.close();
      }
      catch (Exception ex)
      {
      }
    }
    return true;
  }

  private boolean addBuildProperty()
  {
    Properties buildProperties = new Properties();
    String pPath = projectRoot + FS
      + "build.properties";
    File pFile = new File(pPath);
    if (!pFile.exists())
    {
      try
      {
        pFile.createNewFile();
      }
      catch (IOException ex)
      {
        return false;
      }
    }
    FileInputStream fis = null;
    try
    {
      fis = new FileInputStream(pFile);
      buildProperties.load(fis);
    }
    catch (IOException ex)
    {
      return false;
    }
    finally
    {
      try
      {
        fis.close();
      }
      catch (Exception ex)
      {
      }
    }
    buildProperties.setProperty("jar.libs.dir", libraryFiles);
    try
    {
      FileOutputStream fos = new FileOutputStream(pFile);
      buildProperties.store(fos, null);
      fos.close();
    }
    catch (IOException ex)
    {
      return false;
    }
    return true;
  }

  private Properties loadProperties()
  {
    // Return null, if error

    propFile = new File(propPath);
    if (!propFile.exists())
    {
      try
      {
        propFile.createNewFile();
      }
      catch (IOException ex)
      {
        return null;
      }
    }
    FileInputStream fis = null;
    try
    {
      fis = new FileInputStream(propFile);
      prop.load(fis);
    }
    catch (IOException ex)
    {
      return null;
    }
    finally
    {
      try
      {
        fis.close();
      }
      catch (Exception ex)
      {
      }
    }
    return prop;
  }

  protected void doIt()
  {
    if (t != null && t.isAlive())
      return;
    t = new Thread()
    {
      public void run()
      {
        showStatus("Processing...");
        delay(1000);  // Time to show processing message
        String[] fields = new String[NB_TEXTFIELDS];
        fields = getFields();

        fields[0] = trimFolder(fields[0]);
        fields[3] = trimFolder(fields[3]);
        fields[4] = trimFolder(fields[4]);
        if (prop != null)
        {
          for (int i = 0; i < NB_TEXTFIELDS; i++)
            prop.setProperty(keys[i], fields[i]);
          prop.setProperty("use.turtle", chkTurtle.isSelected() ? "yes" : "no");
          prop.setProperty("use.internet", chkInternet.isSelected() ? "yes" : "no");
          prop.setProperty("use.bluetooth", chkBluetooth.isSelected() ? "yes" : "no");
        }
        prop.setProperty("prog.version", VERSION);
        try
        {
          FileOutputStream fos = new FileOutputStream(propFile);
          prop.store(fos, null);
          fos.close();
        }
        catch (IOException ex)
        {
          showStatus("Can't write to properties file.");
          delay(3000);
        }

        projectRoot = fields[0];
        packageName = fields[1];
        if (packageName.indexOf(".") == -1)
        {
          showStatus("Package name must contain at least one period.");
          return;
        }
        appName = fields[2];
        libraryFiles = fields[3].trim();
        // If sepaparator is space but not ; -> refuse
        if ((libraryFiles.indexOf(' ') != -1 && libraryFiles.indexOf(';') == -1)
          || // separator is a colon -> refuse
          (libraryFiles.indexOf(',') != -1))
        {
          showStatus("Library Files must be separated by semicolon.");
          return;
        }
        spritesFolder = fields[4];
        mediaFolder = fields[5];

        perform();

      }
    };
    t.start();
  }

  private void perform()
  {
    if (!writeManifest())
    {
      showStatus("Can't modify AndroidManifest.xml");
      return;
    }

    if (!writeAntBuild())
    {
      showStatus("Can't modify build.xml");
      return;
    }

    if (!writeMain())
    {
      showStatus("Can't modify main.xml");
      return;
    }

    if (!writeConsole())
    {
      showStatus("Can't write console.xml");
      return;
    }

    if (!writeToast())
    {
      showStatus("Can't write toast_layout.xml");
      return;
    }

    if (!writeStrings())
    {
      showStatus("Can't modify strings.xml");
      return;
    }

    if (!writeProjectProperties())
    {
      showStatus("Can't write project.properties");
      return;
    }

    if (!writeLib())
      return;

    copySpritesFolder();
    copyMediaFolder();

    if (!writeSourceTemplate())
      showStatus("Can't create template source file");
    else
      showStatus("Android project successfully built");
  }

  private void showStatus(final String msg)
  {
    SwingUtilities.invokeLater(new Runnable()
    {
      public void run()
      {
        tfStatus.setText(msg);
      }
    });
  }

  private void delay(int timeout)
  {
    try
    {
      Thread.sleep(timeout);
    }
    catch (InterruptedException ex)
    {
    }
  }

  private String trimFolder(String folder)
  {
    if (folder == null || folder.equals(""))
      return "";
    String trimFolder = folder.replace("\\", "/");
    if (trimFolder.charAt(trimFolder.length() - 1) == '/')
      trimFolder = trimFolder.substring(0, trimFolder.length() - 1);
    return trimFolder;
  }

  private boolean writeSourceTemplate()
  {
//    File manifestTemplate = new File("c:/scratch/Template.java");
//    String s = readFile(manifestTemplate);
    String s = null;
    if (chkTurtle.isSelected())
      s = loadTextResource("res/App.turtle_template");
    else
      s = loadTextResource("res/App.java_template");
    if (s == null)
      return false;
    s = s.replace(packageNameTag, packageName);
    s = s.replace(appNameTag, appName);
    File source =
      new File(projectRoot + "/src/" + packageName.replace('.', '/')
      + "/" + appName + ".java");
    if (source.exists())
    {
      showStatus("File overwrite warning!");
      Object[] options =
      {
        "Keep", "Replace"
      };
      int rc =
        JOptionPane.showOptionDialog(null, "Keep existing source file?\n"
        + source.getPath(), "Warning",
        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
        null, options, options[0]);

      if (rc != JOptionPane.NO_OPTION)
        return true;
    }
    return writeFile(source, s, true);
  }

  private boolean writeManifest()
  {
    String s = null;
    if (!chkInternet.isSelected() && !chkBluetooth.isSelected())
      s = loadTextResource("res/AndroidManifest_standard.xml");
    if (chkInternet.isSelected() && !chkBluetooth.isSelected())
      s = loadTextResource("res/AndroidManifest_internet.xml");
    if (!chkInternet.isSelected() && chkBluetooth.isSelected())
      s = loadTextResource("res/AndroidManifest_bluetooth.xml");
    if (chkInternet.isSelected() && chkBluetooth.isSelected())
      s = loadTextResource("res/AndroidManifest_internetandbluetooth.xml");

    if (s == null)
      return false;
    s = s.replace(packageNameTag, packageName);
    s = s.replace(appNameTag, appName);
    File manifest = new File(projectRoot + "/AndroidManifest.xml");
    if (manifest.exists())
      manifest.delete();
    return writeFile(manifest, s, false);
  }

  private boolean writeAntBuild()
  {
    String s = loadTextResource("res/build.xml");
    if (s == null)
      return false;
    s = s.replace(appNameTag, appName);
    File antBuild = new File(projectRoot + "/build.xml");
    if (antBuild.exists())
      antBuild.delete();
    return writeFile(antBuild, s, false);
  }

  private boolean writeMain()
  {
    String s = loadTextResource("res/main.xml");
    if (s == null)
      return false;
    File file = new File(projectRoot + "/res/layout/main.xml");
    if (file.exists())
      file.delete();
    return writeFile(file, s, false);
  }

  private boolean writeConsole()
  {
    String s = loadTextResource("res/console.xml");
    if (s == null)
      return false;
    File file = new File(projectRoot + "/res/layout/console.xml");
    if (file.exists())
      file.delete();
    return writeFile(file, s, false);
  }

  private boolean writeToast()
  {
    String s = loadTextResource("res/toast_layout.xml");
    if (s == null)
      return false;
    File file = new File(projectRoot + "/res/layout/toast_layout.xml");
    if (file.exists())
      file.delete();
    return writeFile(file, s, false);
  }

  private boolean writeStrings()
  {
    String s = loadTextResource("res/strings.xml");
    if (s == null)
      return false;
    File file = new File(projectRoot + "/res/values/strings.xml");
    if (file.exists())
      file.delete();
    return writeFile(file, s, false);
  }

  private boolean writeProjectProperties()
  {
    String s = loadTextResource("res/project.properties");
    if (s == null)
      return false;
    File file = new File(projectRoot + "/project.properties");
    if (file.exists())
      file.delete();
    return writeFile(file, s, false);
  }

  private boolean writeLib()
  {
    File libFolderFile = new File(projectRoot + "/libs");
    if (!libFolderFile.exists())
    {
      if (!libFolderFile.mkdir())
        return false;
    }
    else // Clean folder
      removeFiles(libFolderFile);

    String[] libs = split(libraryFiles, ";");
    for (int i = 0; i < libs.length; i++)
    {
      libs[i] = libs[i].trim();
      String libName = libs[i];
      libName = libName.replace('\\', '/');
      int index = libName.lastIndexOf("/");
      if (index != -1 && index < libName.length() - 2)
        libName = libName.substring(index + 1);
      String destPath = projectRoot + "/libs/" + libName;
      boolean rc = copyFile(libs[i], destPath);
      if (!rc)
      {
        showStatus("Can't write library file " + libName);
        return false;
      }
    }
    return true;
  }

  /*
   * Splits given string with given separator string into multiple strings.
   * Returns splitted string array (without separator).<br>
   * Returned array has length 0, if input string or separator is null or empty.<br>
   * A trailing separator is stripped.
   */
  private String[] split(String s, String separator)
  {
    if (s == null || s.length() == 0
      || separator == null || separator.length() == 0)
      return new String[0];

    // Strip trailing separator
    int last = s.lastIndexOf(separator);
    if (s.length() >= separator.length()
      && last == s.length() - separator.length())
      s = s.substring(0, last);

    if (s.length() == 0)
      return new String[0];

    Vector<String> nodes = new Vector<String>();

    // Parse nodes into vector
    int index = s.indexOf(separator);
    while (index >= 0)
    {
      nodes.addElement(s.substring(0, index));
      s = s.substring(index + separator.length());
      index = s.indexOf(separator);
    }

    // Get the last node
    nodes.addElement(s);

    // Create splitted string array
    String[] result = new String[nodes.size()];
    if (nodes.size() > 0)
    {
      for (int i = 0; i < nodes.size(); i++)
        result[i] = (String)nodes.elementAt(i);
    }
    return result;
  }

  private String readFile(File file)
  {
    int ch;
    BufferedReader in = null;
    StringBuffer sb = new StringBuffer();
    try
    {
      in =
        new BufferedReader(new FileReader(file));
      while ((ch = in.read()) != -1)
      {
        sb.append((char)ch);
      }
      in.close();
    }
    catch (IOException ex)
    {
      showStatus("Can't read " + file.getPath());
      return null;
    }
    finally
    {
      try
      {
        in.close();
      }
      catch (Exception ex)
      {
      };
    }
    return sb.toString();
  }

  private String loadTextResource(String relPath)
  {
    int ch;
    InputStream is = null;
    StringBuffer sb = new StringBuffer();
    try
    {
      is = getClass().getResourceAsStream(relPath);
      BufferedReader in = new BufferedReader(new InputStreamReader(is));
      while ((ch = in.read()) != -1)
      {
        sb.append((char)ch);
      }
      in.close();
    }
    catch (Exception ex)
    {
      showStatus("Can't read " + relPath);
      return null;
    }
    finally
    {
      try
      {
        is.close();
      }
      catch (Exception ex)
      {
      };
    }
    return sb.toString();
  }

  boolean writeFile(File file, String text, boolean createFolders)
  {
    // Overwrite existing file

    // Creates directory structure if not yet available
    if (createFolders)
    {
      String path = file.getPath().replace('\\', '/');
      String dir = path.substring(0, path.lastIndexOf('/'));
      String[] subdirs = split(dir, "/");
      String[] subpaths = new String[subdirs.length];
      subpaths[0] = subdirs[0];
      for (int i = 1; i < subdirs.length; i++)
      {
        subpaths[i] = subpaths[i - 1] + FS + subdirs[i];
      }
      for (int i = 1; i < subpaths.length; i++)
      {
        File fdir = new File(subpaths[i]);
        if (!fdir.exists())
        {
          boolean rc = fdir.mkdir();
          if (!rc)
          {
            showStatus("Can't create folder " + file.getPath() + ".");
            return false;
          }
        }
      }
    }

    BufferedWriter out = null;
    try
    {
      out = new BufferedWriter(new FileWriter(file));
      out.write(text, 0, text.length());
    }
    catch (Exception ex)
    {
      showStatus("Can't write " + file.getPath() + ".");
      return false;
    }
    finally
    {
      try
      {
        out.close();
      }
      catch (Exception ex)
      {
      };
    }
    return true;
  }

  private static boolean removeFiles(File dirPath)
  {
    boolean ok = true;
    if (dirPath.isDirectory())
    {
      String[] children = dirPath.list();

      boolean rc;
      for (int i = 0; i < children.length; i++)
      {
        File file = new File(dirPath, children[i]);
        if (!file.isDirectory())
        {
          rc = file.delete();
          if (!rc)
            ok = false;
        }
      }
    }
    return ok;
  }

  public static void main(String args[])
  {
    try
    {
      UIManager.setLookAndFeel(
        UIManager.getSystemLookAndFeelClassName());
    }
    catch (Exception ex)
    {
    }

    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new ProjectBuilder().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnBuild;
  private javax.swing.JButton btnLibFiles;
  private javax.swing.JButton btnMediaFolder;
  private javax.swing.JButton btnSpriteFolder;
  private javax.swing.JCheckBox chkBluetooth;
  private javax.swing.JCheckBox chkInternet;
  private javax.swing.JCheckBox chkTurtle;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JSeparator jSeparator2;
  private javax.swing.JTextField tfAppName;
  private javax.swing.JTextField tfLibFiles;
  private javax.swing.JTextField tfMediaFolder;
  private javax.swing.JTextField tfPackageName;
  private javax.swing.JTextField tfProjectRoot;
  private javax.swing.JTextField tfSpriteFolder;
  private javax.swing.JTextField tfStatus;
  // End of variables declaration//GEN-END:variables
}
